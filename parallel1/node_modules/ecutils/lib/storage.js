// Copyright (c) 2014. This file is confidential and proprietary.
// All Rights Reserved, Microchild Technologies (http://www.microchild.com)

'use strict';

/**
 *  Module: storage.js
 *
 * Collection of functions for storing data in redis.
 */

var async = require('async');
var saveStorage = require('./save-storage-utils');
var queryStorage = require('./query-storage-utils');
var storageutils = require('./storage-utils');

var log = require('./logger');
var logger = log.setLogger();

var setLogger = function(exLogger) {
    logger = log.setLogger(exLogger);
};
exports.setLogger = setLogger;

/**
 * Class defination for Storage.
 *
 * We do not need to carry too much options when calling
 * each method in this file.
 *
 * Example:
 *
 *     var storage = new Storage({
 *         'redis_client': redisClient,
 *         'debug': debug
 *     });
 *     storage.unlockTask():
 *
 * @param {Object} options Options for Storage
 */
function Storage(options) {
    this.redisClient = options['redis_client'];
    this.debug = options['debug'] || false;
    saveStorage.setLogger(logger);
    queryStorage.setLogger(logger);
}
exports.Storage = Storage;

/**
 * Remove task lock in redis.
 *
 * @param {String} taskLock Lock key name in redis
 * @param {Function} callback Callback function.
 */
Storage.prototype.unlockTask = function(taskLock, callback) {
    this.redisClient.DEL(taskLock, function(err, reply) {
        callback(err, reply);
    });
}

/**
 * Main function to create objects in redis.
 *
 * To save a group of object in redis, the data structure should
 * include several data types:
 *
 *   [HASH] [object:id] a hash store the real values of a single object
 *   [SET] [S:object] a set store all ids of the object, this will very helpful
 *                    when we need to do a query
 *
 * @param {Object} options Options, see above for detailed
 * @param {Function} callback Callback function
 */
Storage.prototype.updateObjects = function(options, callback) {
    var obj = saveStorage.initialize(this, options);

    /**
     * Run tasks in series model.
     *
     *   * Initialization objects in redis, such as clean any temporary
     *     sets or hash
     *   * Update hash and set in series
     *   * Put all ids into set
     */
    async.series([
        function(callback) {saveStorage.initObjects(obj, callback)},
        function(callback) {saveStorage.setObjects(obj, callback)},
        function(callback) {saveStorage.cleanObjects(obj, callback)}
    ], function(err) {
        callback(err);
    });
}; // end Storage.prototype.updateObjects

/**
 * Main function to update a single object in redis.
 *
 * Options will set by default:
 *
 *   updateSingle = true
 *
 * @param {Object} options Options, see above for detailed
 * @param {Function} callback Callback function
 */
Storage.prototype.updateObject = function(options, callback) {
    var obj = saveStorage.initialize(this, options);
    obj.updateSingle = true;

    saveStorage.saveObject(obj, obj.data, function(error) {
        callback(error);
    });
}; // end Storage.prototype.updateObject

/**
 * Main function to delete an object.
 *
 * @param {Object} options Options, see above for detailed
 * @param {Function} callback Callback function
 */
Storage.prototype.deleteObject = function(options, callback) {
    var obj = saveStorage.initialize(this, options);

    if(options['object_id'] === undefined) {
        throw 'No object id defined.';
    }

    saveStorage.removeObject(obj, options['object_id'],
            function(err) {
        callback(err);
    });
}; // end Storage.prototype.deleteObject

/**
 * Main function to query objects. Query objects according to the
 * given query conditions and return limit records.
 *
 * Example:
 *
 *  Get instances which tenant_id is 123 and status is ACTIVE
 *
 *  storage.getObjects({
 *    resource_type: 'instances',
 *    query: {
 *      tenant_id: '123',
 *      status: 'ACTIVE',
 *      ...
 *    },
 *    limit: {
 *      form: m,
 *      to: n
 *    },
 *    debug: true
 *  }, function(err, replies) {
 *    // do something with the replies
 *  });
 *
 * Options include following items:
 *
 *   * `resource_type`: Object resource type, such as instances,
 *                      projects, volumes, users, flavors, etc.
 *   * `sort_field`: Optional, default is 'created'.
 *   * `query`: Optional, query conditions for specific resource.
 *              See example above.
 *   * `limit`: Optional, limit returns for specific resource.
 *   * `debug`: Optional, debug is true
 *
 * @param {Object} options Options, see above for detailed
 * @param {Function} callback Callback function
 */
Storage.prototype.getObjects = function(options, callback) {
    var obj = queryStorage.initialize(this, options);

    queryStorage.queryObjects(obj, function(err, replies) {
        callback(err, replies);
    });
}; // end getObjects

/**
 * Main function to query objects by ids.
 * Query objects according to the
 * given ids and return records with specified fields.
 *
 * Example:
 *
 *  Get instances which tenant_id is 123 and status is ACTIVE
 *
 *  storage.getObjectsByIds({
 *    resource_type: 'instances',
 *    ids: ['id1', 'id2', 'id3'],
 *    fields: ['name'],
 *    debug: true
 *  }, function(err, replies) {
 *    // do something with the replies
 *  });
 *
 * Options include following items:
 *
 *   * `resource_type`: Object resource type, such as instances,
 *                      projects, volumes, users, flavors, etc.
 *   * `ids`: Optional, default is resource id list.
 *   * `fields`: Optional, specified fields.
 *
 * @param {Object} options Options, see above for detailed
 * @param {Function} callback Callback function
 */
Storage.prototype.getObjectsByIds = function(options, callback) {
    var obj = queryStorage.initialize(this, options);
    obj.ids = options['ids'];

    queryStorage.queryObjectsByIds(obj, function(err, replies) {
        callback(err, replies);
    });
}; // end getObjects

/**
 * Main function to get an object.
 *
 * Example:
 *
 *   storage.getObject({
 *       resource_type: 'instances',
 *       id: 'id'
 *   }, function(err, reply) {
 *       // handle reply
 *   });
 *
 * Options include following items:
 *
 *   * `resource_type`: object resource type, such as instances,
 *                      flavors, etc.
 *   * `id`: object id value.
 *   * `debug`: Optional, true if debug
 *
 * @param {Object} options Options, see above for detailed
 * @param {Function} callback Callback function
 */
Storage.prototype.getObject = function(options, callback) {
    if(options['id'] === undefined) {
        throw 'No object id defined.';
    }
    var obj = queryStorage.initialize(this, options);
    obj.objectId = options['id'];

    queryStorage.queryObject(obj, function(error, data) {
        callback(error, data);
    });

}; // end getObject

/**
 * Main function to query objects by values.
 * Query objects according to the
 * given values and keys want to match and
 * return records with specified fields.
 *
 * Example:
 *
 *  Get instances which name or description contains '123'
 *  or '456'
 *
 *  storage.getObjectsByIds({
 *    resource_type: 'instances',
 *    require_detail: true,
 *    query_cons: {
 *        'name': ['123', '456'],
 *        'metadata@system': ['win', 'centos'],
 *        'description': ['123']
 *    },
 *    limit: {
 *        'from': 1,
 *        'to': 1000
 *    },
 *    condition_relation: 'and',
 *    debug: true
 *  }, function(err, replies) {
 *    // do something with the replies
 *  });
 *
 * Options include following items:
 *
 *   `resource_type`: Object resource type, such as instances,
 *                      projects, volumes, users, flavors, etc.
 *   `require_detail`: If the result require to contain the resource
 *                       detail information.
 *   `query_cons`: Query conditions, query objects which keys
 *                   contains the value it gives.
 *   `condition_relation`: The relation between query conditions,
 *                   default is 'or'.
 *   `limit`: Optional, limit returns for specific resource.
 *
 * @param {Object} options Options, see above for detailed
 * @param {Function} callback Callback function
 */
Storage.prototype.getObjectsByKeyValues = function(options, callback) {
    var obj = queryStorage.initialize(this, options);

    queryStorage.queryObjectsByKeyValues(obj, function(err, replies) {
        callback(err, replies);
    });
}; // end getObjectsByKeyValues
