// Copyright (c) 2014. This file is confidential and proprietary.
// All Rights Reserved, Microchild Technologies (http://www.microchild.com)

'use strict';

/**
 *  Module: jsonutils.js
 *
 * Collection of functions for handling json strings
 */

/**
 * Extend object to json string, this will prevent to save
 * object in formated data.
 *
 * Example:
 *
 *     var data = {
 *         'EXT:tenant_id': '123',
 *         'image': {'id': '456'}
 *     };
 *     var fieldMap = {
 *         'EXT:tenant_id': 'tenant_id'
 *     }
 *     var formatData = json.toJsonString(data, fieldMap);
 *
 *     formatData is:
 *
 *         {
 *             'EXT:tenant_id': '123',
 *             'image': {'id': '456'},
 *             'tenant_id': '123'
 *         }
 *
 * @param {Object} data Object need convert to json string
 * @param {Object} fieldMap Optinal, Field transformer mapping
 *
 */
function toJsonString(data, fieldMap) {
    var formatData = {};
    if(fieldMap === undefined) {
        fieldMap = [];
    }

    for(var key in data) {
        var val = data[key];
        val = (typeof(val) === 'object')? JSON.stringify(val) : val
        formatData[key] = val;
        if(key in fieldMap) {
            data[fieldMap[key]] = data[key];
            formatData[fieldMap[key]] = val;
        }
    } // end for var key

    return formatData;
} // end function toJsonString
exports.toJsonString = toJsonString;

/**
 * This is a wrapper of JSON.parse.
 *
 * When JSON.parse raise an parse error, return the value
 * without any error message.
 *
 * @param {String} string String for json
 */
function parseJson(string) {
    try {
        var result = JSON.parse(string);
        return result;
    } catch(e) {
        return string;
    }
} // end function parseJson
exports.parseJson = parseJson;

/**
 * This is a function to get the length of a json object.
 */
function getJsonLength(data) {
    var length=0;

    for(var key in data) {
        length++;
    }
    return length;
}
exports.getJsonLength = getJsonLength;
