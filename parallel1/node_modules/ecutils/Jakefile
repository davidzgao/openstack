/**
 * Build process for the `vertical` project.
 *
 * Prior to running this, make sure you have the following
 * NPM packages _globally installed_:
 *
 *   - `npm install -g mocha`
 *
 * To see a list of targets, type:
 *
 *     jake -T
 *
 * The default calls most of the targets:
 *
 *     jake
 */

var cp = require('child_process');
var fs = require('fs');
var path = require('path');

var Mocha = require('mocha');

var codeDirs = ['lib'];

// Code coverage library versions
var covlibDir = 'test/covlib';

// Doc dir
var docDir = 'docs';
var coverageReport = 'test-coverage.html';

desc('Run the mocha unit tests');
task('test', {async: true}, function(params) {
    process.env.NODE_ENV = 'testing';
    var files = findFiles('test', /^test\-.*\.js$/);
    var mocha = new Mocha({'reporter': 'spec', 'ui': 'tdd'});

    // get files
    for(index in files) {
        mocha.addFile(files[index]);
    }

    // mocha run
    mocha.run(function(error) {
        if(error) {
            fail(error);
        } else {
            complete();
        }
    });
});

desc('Generate coverage report');
task('coverage', {async: true}, function(params) {
    process.env.NODE_ENV = 'testing';
    process.env.COVLIB = 'true';

    // prepare for coverage report
    if(fs.existsSync(covlibDir)) {
        jake.rmRf(covlibDir);
    }
    jake.mkdirP(covlibDir);

    if(! fs.existsSync(docDir)) {
        jake.mkdirP(docDir);
    }

    coverageReport = path.join(docDir, coverageReport);
    if(fs.existsSync(coverageReport)) {
        jake.rmRf(coverageReport);
    }

    var cmds = [];
    for(var i in codeDirs) {
        var dirname = codeDirs[i];
        var dirdest = path.join(covlibDir, dirname);
        cmds.push('jscoverage ' + dirname + ' ' + dirdest);
    }

    jake.exec(cmds, {stdout: true, stderr: true}, function() {
        // Generate coverage report
        var files = findFiles('test', /^test\-.*\.js$/);
        var cmd = 'mocha --reporter html-cov --ui tdd ' + files.join(' ')
            + ' > ' + coverageReport;
        jake.exec(cmd, {stdout: true, stderr: true}, function() {
            complete();
        });

    }); // end jake exec

});

desc('Clean all');
task('clean', function(params) {
    jake.rmRf(docDir);
    jake.rmRf(covlibDir);
});

/**
 * Beginning with a directory, this searches it for all files that match
 * a particular pattern.
 *
 * @param {String} The name of a directory, e.g. `test`
 * @param {RegeExp} A regular expression to match against the files.
 */

function findFiles(directory, pattern) {
    // Make sure current directory is an actual directory:
    if (directory) {
        var stat = fs.statSync(directory);
        pattern = new RegExp(pattern);
        if (stat.isDirectory()) {
            return findDirectoryFiles(directory, pattern);
        }
    }
    throw new Error("Not a directory: " + directory);
}

function findDirectoryFiles(directory, pattern) {
    var results = [];
    var filenames = fs.readdirSync(directory);
    for(f in filenames) {
        var file = filenames[f];
        var fullname = path.join(directory, file);

        if (fs.statSync(fullname).isDirectory()) {
            results = results.concat(findDirectoryFiles(
                        fullname, pattern));
        }
        else {
            if(pattern.test(file)) {
                results.push(fullname);
            }
        }
    }
    return results;
}
