// Copyright (c) 2014. This file is confidential and proprietary.
// All Rights Reserved, Microchild Technologies (http://www.microchild.com)

var assert = require('assert');

var jsonutils;
if (process.env.COVLIB) {
    jsonutils = require('./covlib//lib/jsonutils');
} else {
    jsonutils = require('../lib/jsonutils');
}

var data = {
    'EXT:tenant_id': '123',
    'image': {'id': '456', 'nested': {'id': 321}}
};
var fieldMap = {
    'EXT:tenant_id': 'tenant_id'
}

suite('Json Utils Testing', function() {
    suite('function toJsonString', function() {
        test('Field in map should be renamed', function() {
            var formatData = jsonutils.toJsonString(data, fieldMap);
            assert.equal(data['EXT:tenant_id'], formatData['tenant_id']);
        }); // end test

        test('Object value should be converted', function() {
            var formatData = jsonutils.toJsonString(data, fieldMap);
            assert.equal('string', typeof(formatData['image']));
        }); // end test

        test('Function should work without fieldMap', function() {
            var formatData = jsonutils.toJsonString(data);
            assert.equal('string', typeof(formatData['image']));
        }); // end test
    }); // end suite function toJsonString

    suite('function parseJson', function() {
        test('Json string should be parsed', function() {
            var testString = '{"id": 1}';
            var jsonObj = jsonutils.parseJson(testString);
            assert.equal(1, jsonObj['id']);
            assert.equal('object', typeof(jsonObj));
        }); // end test

        test('Common string should not be parsed', function() {
            var testString = 'A test string';
            var jsonObj = jsonutils.parseJson(testString);
            assert.equal(testString, jsonObj);
            assert.equal('string', typeof(jsonObj));
        }); // end test
    }); // end suite function parseJson
}); // end suite Json Utils Testing
