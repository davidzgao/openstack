// Copyright (c) 2014. This file is confidential and proprietary.
// All Rights Reserved, Microchild Technologies (http://www.microchild.com)

var assert = require('assert');

var storage;
if (process.env.COVLIB) {
    storage = require('./covlib//lib/query-storage-utils');
} else {
    storage = require('../lib/query-storage-utils');
}

var mockRedis = require('./mock/mockRedis');

var fetchAt = new Date().getTime();

var mockRedisClient = mockRedis.mockRedisClient;

var options = {
    'resource_type': 'instances',
    'name': 'windows123'
};

var storageObj = {};
storage.initialize(storageObj, options);
storageObj.debug = false;
storageObj.redisClient = mockRedisClient;

var objectIds = ['1', '2', '3'];
var objectType = 'instances';
var objsInRedis = {};
for(var id in objectIds) {
    objsInRedis[objectType+':'+objectIds[id]] = {
        id: objectIds[id],
        name: 'windows'+objectIds[id],
        metadata: {
            system_type: {
                server_name: 'windows'+objectIds[id]
            }
        },
        owner: 'user'+objectIds[id]
    }
}
storageObj.redisClient._setRedisStore(objsInRedis);


suite('Query Storage Testing', function() {
    suite('function initialize', function() {
        test('Error should throw when resource_type is missing',
            function() {
            var obj = {};
            var options = {
                'resource_type': undefined
            }
            assert.throws(
                function() {
                    storage.initialize(obj, options);
                },
                /No query resource type defined./
            );
        }); // end test
    }); // end suite function initialize

    suite('function queryObject', function() {
        test('callback null if hashkey not exist', function() {
            var query = {
                resource_type: objectType,
                objectId: '22',
                redisClient: mockRedisClient
            }

            storage.queryObject(query, function(err, replies) {
                assert.equal(null, replies);
            });
        }); // end test

        test('callback the object by id', function() {
            var query = {
                resourceType: objectType,
                objectId: '2',
                redisClient: mockRedisClient
            }
            var result = {
                id: '2',
                name: 'windows2',
                metadata: {
                    system_type: {
                        server_name: 'windows2'
                    }
                }
            }

            storage.queryObject(query, function(err, replies) {
                assert.equal(result['id'], replies['id']);
                assert.equal(result['name'], replies['name']);
                assert.equal(
                    result['metadata']['system_type']['server_name'],
                    replies['metadata']['system_type']['server_name']);
            });
        }); // end test
    }); // end suite function queryObject

    suite('function queryObjects', function() {
        test('callback null if no match data in store', function() {
            var query = {
                resourceType: objectType,
                sortField: 'id',
                query: {
                    'id': '11',
                    'name': 'windows12'
                },
                redisClient: mockRedisClient
            }

            storage.queryObject(query, function(err, replies) {
                assert.equal(null, replies);
            });
        }); // end test

        test('callback the objects match the query', function() {
            var query = {
                resourceType: objectType,
                query: {
                    'name': 'windows1',
                    'owner': 'user1'
                },
                redisClient: mockRedisClient
            }
            var result = {
                total: 1,
                data: [{
                    id: '1',
                    name: 'windows1',
                    metadata: {
                        system_type: {
                            server_name: 'windows1'
                        }
                    }
                }]
            }

            storage.queryObjects(query, function(err, replies) {
                assert.equal(result['total'], replies['total']);
                assert.equal(
                    result['data'][0]['id'], replies['data'][0]['id']);
                assert.equal(
                    result['data'][0]['name'], replies['data'][0]['name']);
            });
        }); // end test
    }); // end suite function queryObjects

    suite('function queryObjectsByIds', function() {
        test('callback null if no match data in store', function() {
            var query = {
                resourceType: objectType,
                sortField: 'id',
                fields: ['id', 'name', 'owner'],
                ids: ['22', '33'],
                redisClient: mockRedisClient
            }

            storage.queryObjectsByIds(query, function(err, replies) {
                var numOfResult = 0;
                for(var key in replies) {
                    numOfResult++;
                }
                assert.equal(0, numOfResult);
            });
        }); // end test

        test('callback the objects match the ids', function() {
            var query = {
                resourceType: objectType,
                fields: ['id', 'name', 'owner'],
                ids: ['1', '3'],
                redisClient: mockRedisClient
            }
            var result = {
                '1': {
                    id: '1',
                    name: 'windows1',
                    owner: 'user1',
                },
                '3': {
                    id: '3',
                    name: 'windows3',
                    owner: 'user3',
                }
            }

            storage.queryObjectsByIds(query, function(err, replies) {
                assert.equal(result['total'], replies['total']);
                assert.equal(
                    result['1']['id'], replies['1']['id']);
                assert.equal(
                    result['1']['name'], replies['1']['name']);
                assert.equal(
                    result['3']['id'], replies['3']['id']);
                assert.equal(
                    result['3']['name'], replies['3']['name']);
            });
        }); // end test
    }); // end suite function queryObjectsByIds

    suite('function queryObjectsByKeyValues', function() {
        test('callback null if no match data in store', function() {
            var query = {
                resourceType: objectType,
                requireDetail: true,
                limit: false,
                queryCons: {
                    'name': ['11'],
                    'metadata:system_type:server_name':
                        ['redhat','centos']
                },
                redisClient: mockRedisClient
            }

            storage.queryObjectsByKeyValues(query, function(err, replies) {
                assert.equal(0, replies['total']);
            });
        }); // end test

        test('callback the objects match the query condition', function() {
            var query = {
                resourceType: objectType,
                requireDetail: false,
                limit: false,
                queryCons: {
                    'name': ['windows1'],
                    'metadata:system_type:server_name':
                        ['windows3']
                },
                redisClient: mockRedisClient
            }
            var result = {
                '1': {
                    'name': 'windows1'
                },
                '3': {
                    'metadata:system_type:server_name': {
                        'system_type': {
                            'server_name': 'windows3'
                        }
                    }
                }
            }

            storage.queryObjectsByKeyValues(query, function(err, replies) {
                var replyMetadata = replies['3']['metadata:system_type:server_name'];
                var systemType = replyMetadata['system_type'];
                assert.equal(
                    result['1']['name'], replies['1']['name']);
                assert.equal('windows3', systemType['server_name']);
            });
        }); // end test
    }); // end suite function queryObjectsByKeyValues
});
