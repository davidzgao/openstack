// Copyright (c) 2014. This file is confidential and proprietary.
// All Rights Reserved, Microchild Technologies (http://www.microchild.com)

var assert = require('assert');

var storage;
if (process.env.COVLIB) {
    storage = require('./covlib//lib/save-storage-utils');
} else {
    storage = require('../lib/save-storage-utils');
}

var mockRedis = require('./mock/mockRedis');

var fetchAt = new Date().getTime();

var mockRedisClient = mockRedis.mockRedisClient;

var options = {
    'hash_prefix': 'instances',
    'fetch_at': fetchAt
};

var storageObj = {};
storage.initialize(storageObj, options);
storageObj.debug = false;
storageObj.redisClient = mockRedisClient;

suite('Save Storage Testing', function() {
    suite('function initialize', function() {
        test('Error should throw when hash prefix is missing',
            function() {
            var options = {
                'hash_prefix': undefined
            }
            assert.throws(
                function() {
                    storage.initialize(storageObj, options);
                },
                /No hash prefix defined./
            );
        }); // end test
    }); // end suite function initialize

    suite('function initObjects', function() {
        test('Temp set should be removed', function() {
            var newObjectSet = 'S:instances.new';
            var mockRedisStore = {};
            mockRedisStore[newObjectSet] = [];
            storageObj.redisClient._setRedisStore(mockRedisStore);
            storage.initObjects(storageObj, function(err, replies) {
                assert.equal(false,
                    newObjectSet in mockRedisClient._getRedisStore());
            });
        }); // end test
    }); // end suite function initObjects

    suite('function setObjects', function() {
        test('Callback null if data is empty', function() {
            storageObj.data = [];
            storage.setObjects(storageObj, function(err) {
                assert.equal(null, err);
            });
        }); // end test

        test('Insert a new object', function() {
            var newObjects = [
                {
                    'id': 123,
                    'name': 'test_instance_123',
                    'created': '2014-08-21T15:01:44Z',
                    'updated': '2014-08-21T15:01:44Z',
                    'fetch_at': fetchAt
                },
                {
                    'id': 456,
                    'name': 'test_instance_456',
                    'created': '2014-08-21T15:01:44Z',
                    'updated': '2014-08-21T15:01:44Z',
                    'fetch_at': fetchAt
                }
            ]; // end newObjects
            storageObj.data = newObjects;
            storage.setObjects(storageObj, function(err) {
                var redisStore = mockRedisClient._getRedisStore();
                assert.equal(newObjects.length,
                    redisStore['S:instances'].length);
                assert.equal(newObjects[0]['name'],
                    redisStore['instances:123']['name']);
            });
        }); // end test

        test('Update a single object', function() {
            var origObjects = {
                'instances:123': {
                    'id': 123,
                    'name': 'test_instance_123',
                    'created': '2014-08-21T15:01:44Z',
                    'updated': '2014-08-21T15:01:44Z',
                    'fetch_at': fetchAt
                },
                'instances:456': {
                    'id': 456,
                    'name': 'test_instance_456',
                    'created': '2014-08-21T15:01:44Z',
                    'updated': '2014-08-21T15:01:44Z',
                    'fetch_at': fetchAt
                },
                'S:instances': ['123', '456'],
                'S:instances.new': ['123', '456']
            };
            mockRedisClient._setRedisStore(origObjects);

            var newObjects = [
                {
                    'id': 456,
                    'name': 'test_instance_456',
                    'created': '2014-08-21T15:01:44Z',
                    'updated': '2014-08-21T15:02:44Z',
                    'fetch_at': fetchAt
                }
            ]; // end newObjects
            storageObj.data = newObjects;
            storageObj.updateSingle = true;
            storage.setObjects(storageObj, function(err) {
                var redisStore = mockRedisClient._getRedisStore();
                assert.equal(3, redisStore['S:instances'].length);
                assert.equal(2, redisStore['S:instances.new'].length);
            });
        }); // end test

        test('Expired object should not be inserted', function() {
            var origUpdateDate = '2014-08-21T15:01:44Z';
            var newUpdateDate = '2014-08-21T15:00:44Z';
            var origObjects = {
                'instances:123': {
                    'id': 123,
                    'name': 'test_instance_123',
                    'created': '2014-08-21T15:01:44Z',
                    'updated': origUpdateDate,
                    'fetch_at': fetchAt
                },
                'instances:456': {
                    'id': 456,
                    'name': 'test_instance_456',
                    'created': '2014-08-21T15:01:44Z',
                    'updated': '2014-08-21T15:01:44Z',
                    'fetch_at': fetchAt
                },
                'S:instances': ['123', '456']
            };
            mockRedisClient._setRedisStore(origObjects);

            var newObjects = [
                {
                    'id': 123,
                    'name': 'test_instance_123',
                    'created': '2014-08-21T15:01:44Z',
                    'updated': newUpdateDate,
                    'fetch_at': fetchAt
                }
            ];
            storageObj.data = newObjects;
            storage.setObjects(storageObj, function(err) {
                var redisStore = mockRedisClient._getRedisStore();
                assert.equal(origUpdateDate,
                    redisStore['instances:123']['updated']);
            });
        }); // end test

        test('Object should be inserted if fetchAt is expired', function() {
            var origObjects = {
                'instances:123': {
                    'id': 123,
                    'name': 'test_instance_123',
                    'created': '2014-08-21T15:01:44Z',
                    'fetch_at': fetchAt - 1
                },
                'instances:456': {
                    'id': 456,
                    'name': 'test_instance_456',
                    'created': '2014-08-21T15:01:44Z',
                    'fetch_at': fetchAt
                },
                'S:instances': ['123', '456']
            };
            mockRedisClient._setRedisStore(origObjects);

            var newObjects = [
                {
                    'id': 123,
                    'name': 'test_instance_123',
                    'created': '2014-08-21T15:01:44Z',
                    'fetch_at': fetchAt
                }
            ];
            storageObj.data = newObjects;
            storage.setObjects(storageObj, function(err) {
                var redisStore = mockRedisClient._getRedisStore();
                assert.equal(fetchAt,
                    redisStore['instances:123']['fetch_at']);
            });
        }); // end test

        test('Object with different keys should be inserted after removed',
                function() {
            var origObjects = {
                'instances:123': {
                    'id': 123,
                    'name': 'test_instance_123',
                    'extra_key': 'extra_key',
                    'created': '2014-08-21T15:01:44Z',
                    'fetch_at': fetchAt - 1
                },
                'instances:456': {
                    'id': 456,
                    'name': 'test_instance_456',
                    'created': '2014-08-21T15:01:44Z',
                    'fetch_at': fetchAt
                },
                'S:instances': ['123', '456']
            };
            mockRedisClient._setRedisStore(origObjects);

            var newObjects = [
                {
                    'id': 123,
                    'name': 'test_instance_123',
                    'created': '2014-08-21T15:01:44Z',
                    'fetch_at': fetchAt
                }
            ];
            storageObj.data = newObjects;
            storage.setObjects(storageObj, function(err) {
                var redisStore = mockRedisClient._getRedisStore();
                assert.equal(undefined,
                    redisStore['instances:123']['extra_key']);
            });
        }); // end test
    }); // end suite function setObjects

    suite('function cleanObjects', function() {
        test('No different id', function() {
            var origObjects = {
                'instances:123': {
                    'id': 123,
                    'name': 'test_instance_123',
                    'created': '2014-08-21T15:01:44Z',
                    'fetch_at': fetchAt
                },
                'instances:456': {
                    'id': 456,
                    'name': 'test_instance_456',
                    'created': '2014-08-21T15:01:44Z',
                    'fetch_at': fetchAt
                },
                'S:instances': ['123', '456'],
                'S:instances.new': ['123', '456']
            };
            mockRedisClient._setRedisStore(origObjects);

            storage.cleanObjects(storageObj, function(err, reply) {
                var redisStore = mockRedisClient._getRedisStore();
                assert.equal(2, redisStore['S:instances'].length);
                assert.equal(null, reply);
            });
        }); // end test

        test('Object should be removed if expired', function() {
            var origObjects = {
                'instances:123': {
                    'id': 123,
                    'name': 'test_instance_123',
                    'created': '2014-08-21T15:01:44Z',
                    'fetch_at': fetchAt - 1
                },
                'instances:456': {
                    'id': 456,
                    'name': 'test_instance_456',
                    'created': '2014-08-21T15:01:44Z',
                    'fetch_at': fetchAt - 1
                },
                'S:instances': ['123', '456'],
                'S:instances.new': ['123']
            };
            mockRedisClient._setRedisStore(origObjects);

            storage.cleanObjects(storageObj, function(err) {
                var redisStore = mockRedisClient._getRedisStore();
                assert.equal(1, redisStore['S:instances'].length);
                assert.equal(undefined, redisStore['instances:456']);
            });
        }); // end test

        test('Object should not be removed if fetchAt is the same',
                function() {
            var origObjects = {
                'instances:123': {
                    'id': 123,
                    'name': 'test_instance_123',
                    'created': '2014-08-21T15:01:44Z',
                    'fetch_at': fetchAt
                },
                'instances:456': {
                    'id': 456,
                    'name': 'test_instance_456',
                    'created': '2014-08-21T15:01:44Z',
                    'fetch_at': fetchAt
                },
                'S:instances': ['123', '456'],
                'S:instances.new': ['123']
            };
            mockRedisClient._setRedisStore(origObjects);

            storage.cleanObjects(storageObj, function(err) {
                var redisStore = mockRedisClient._getRedisStore();
                assert.equal(2, redisStore['S:instances'].length);
                assert.notEqual(undefined, redisStore['instances:456']);
            });
        }); // end test

        test('Object should not be removed if not expired',
                function() {
            var origObjects = {
                'instances:123': {
                    'id': 123,
                    'name': 'test_instance_123',
                    'created': '2014-08-21T15:01:44Z',
                    'fetch_at': fetchAt
                },
                'instances:456': {
                    'id': 456,
                    'name': 'test_instance_456',
                    'created': '2014-08-21T15:01:44Z',
                    'fetch_at': fetchAt + 1
                },
                'S:instances': ['123', '456'],
                'S:instances.new': ['123']
            };
            mockRedisClient._setRedisStore(origObjects);

            storage.cleanObjects(storageObj, function(err) {
                var redisStore = mockRedisClient._getRedisStore();
                assert.equal(2, redisStore['S:instances'].length);
                assert.notEqual(undefined, redisStore['instances:456']);
            });
        }); // end test
    }); // end suite function cleanObjects
}); // end suite Save Storage Testing
