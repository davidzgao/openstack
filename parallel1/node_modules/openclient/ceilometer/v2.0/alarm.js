var base = require("../../client/base"),
    error = require("../../client/error"),
    urljoin = require("../../client/utils").urljoin;

var AlarmManager = base.Manager.extend({
  namespace: "alarms",
  singular: "alarm",

  get_base_url: function (params) {
    var base = this.client.url_for(params.endpoint_type || this.endpoint_type,
                                   undefined, params.region_name);
    if (!base) {
      base = this.client.url_for(params.endpoint_type_backup || this.endpoint_type_backup,
                                 undefined, params.region_name);
    }
    return urljoin(base, "v2", this.prepare_namespace(params));
  },

  create: function (params, callback) {
    params.manager_method = "create";
    params.use_raw_data = true;
    params = this.prepare_params(params, this.get_base_url(params), "singular");
    parseResult = function (result) {
      delete result.triggered_resources;
      return result;
    };
    delete params.result_key;
    params.parseResult = parseResult;
    return this.client[params.http_method || this.method_map.create](params, callback);
  },

  all: function (params, callback) {
    params.manager_method = 'all';
    params = this.prepare_params(params, this.get_base_url(params), "plural");
    /*
    ** The argument 'triggered_resources' in alarms resoult, that
    ** may be contain large resources data, for guarante the
    ** performance, delete it before response.
    */
    parseResult = function (result) {
      for (var i = 0; i< result.length; i ++) {
        delete result[i].triggered_resources;
      }
      return result;
    };
    delete params.result_key;
    params.parseResult = parseResult;
    return this.client[params.http_method || this.method_map.get](params, callback);
  },

  update: function (params, callback) {
    params.manager_method = "update";
    params.use_raw_data = true;
    params = this.normalize_id(params);
    var url = urljoin(this.get_base_url(params), params.id);
    params = this.prepare_params(params, url, "singular");
    parseResult = function (result) {
      delete result.triggered_resources;
      return result;
    };
    delete params.result_key;
    params.parseResult = parseResult;
    return this.client[params.http_method || this.method_map.update](params, callback);
  },

  get: function (params, callback) {
    params.manager_method = "get";
    params = this.normalize_id(params);
    var url = urljoin(this.get_base_url(params), params.id);
    params = this.prepare_params(params, url, "singular");
    parseResult = function (result) {
      delete result.triggered_resources;
      return result;
    };
    delete params.result_key;
    params.parseResult = parseResult;
    return this.client[params.http_method || this.method_map.get](params, callback);
  }
});

module.exports = AlarmManager;
