var base = require("../../client/base");

var PlanManager = base.Manager.extend({
  namespace: "plans",

  prepare_action_data: function (data) {
    if (this.use_raw_data) return data;
    var wrapped_data = {};
    wrapped_data = data;
    return wrapped_data;
  },

  // Prepares common parameters to be passed to client.request().
  prepare_action_params: function (params, url, plural_or_singular) {
    params = params || {};
    params.url = params.url || url;
    // Allow false-y values for the result key.
    if (typeof(params.result_key) === "undefined") {
      params.result_key = params.result_key || this[plural_or_singular];
    }

    if (params.push_data) {
      params.push_data = this._rpc_to_api(params.push_data);
    }

    // Ensure that we only wrap the data object if data is present and
    // contains actual values.
    if (params.use_raw_data) {
      params.data = params.data;
    } else if (params.data && typeof params.data === "object" && Object.keys(params.data).length > 0) {
      params.data = this.prepare_action_data(params.data || {});
    } else {
      params.data = {};
    }
    if (this.error_key) {
      params.error_key = this.error_key;
    }
    return params;
  },

  action: function(params, callback) {
    var url = urljoin(this.get_base_url(params), params.id || params.data.id, "action");
    if (params.data && params.data.id) delete params.data.id;
    params = this.prepare_action_params(params, url, "singular");
    return this.client.post(params, callback);
  },

  prepare_resource_data: function (data) {
    if (this.use_raw_data) return data;
    var wrapped_data = {};
    wrapped_data = data;
    return wrapped_data;
  },

  // Prepares common parameters to be passed to client.request().
  prepare_resource_params: function (params, url, plural_or_singular) {
    params = params || {};
    params.url = params.url || url;
    // Allow false-y values for the result key.
    if (typeof(params.result_key) === "undefined") {
      params.result_key = params.result_key || this[plural_or_singular];
    }

    if (params.push_data) {
      params.push_data = this._rpc_to_api(params.push_data);
    }

    // Ensure that we only wrap the data object if data is present and
    // contains actual values.
    if (params.use_raw_data) {
      params.data = params.data;
    } else if (params.data && typeof params.data === "object" && Object.keys(params.data).length > 0) {
      params.data = this.prepare_action_data(params.data || {});
    } else {
      params.data = {};
    }
    if (this.error_key) {
      params.error_key = this.error_key;
    }
    return params;
  },
  get_resource: function (params, callback) {
    var base_url = this.get_base_url(params);
    var plan_id = params.plan_id || params.params.plan_id;
    var id = params.id || params.params.id;
    var url = urljoin(base_url, plan_id, 'resources', id);
    if (params.data && params.data.id) delete params.data.id;
    params = this.prepare_action_params(params, url, "singular");
    return this.client.get(params, callback);
  },
  get_resource_console: function (params, callback) {
    var base_url = this.get_base_url(params);
    var plan_id = params.plan_id || params.params.plan_id;
    var id = params.id || params.params.id;
    var url = urljoin(base_url, plan_id, 'resources', id, 'console');
    if (params.data && params.data.id) delete params.data.id;
    params = this.prepare_action_params(params, url, "singular");
    return this.client.get(params, callback);
  }
})

module.exports = PlanManager;
