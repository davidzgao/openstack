var async = require('async'),
    base = require("../../client/base"),
    error = require("../../client/error"),
    urljoin = require("../../client/utils").urljoin;


var HighlandManager = base.Manager.extend({
  namespace: "rules",
  plural: "rules",

  get_base_url: function (params) {
    var base = this.client.url_for(params.endpoint_type || this.endpoint_type);
    if (!base) {
      base = this.client.url_for(params.endpoint_type_backup || this.endpoint_type_backup);
    }
    var base_url = urljoin(base, this.client.scoped_token.tenant.id);
    base_url = urljoin(base_url, this.prepare_namespace(params));
    if (params.detail) {
      base_url = this.urljoin(base_url, 'detail');
    }
    return base_url;
  },

  create: function (params, callback) {
    params.manager_method = "create";
    params = this.prepare_params(params, this.get_base_url(params), "singular");
    params.data = params.data[this.singular]
    return this.client[params.http_method || this.method_map.create](params, callback);
  },

  update: function (params, callback) {
    params.manager_method = "update";
    params = this.normalize_id(params);
    var url = urljoin(this.get_base_url(params), params.id);
    params = this.prepare_params(params, url, "singular");
    params.data = params.data[this.singular]
    return this.client[params.http_method || this.method_map.update](params, callback);
  },

  template: function(params, callback) {
    var url = urljoin(this.get_base_url(params), params.id || params.data.id, "template");
    params = this.prepare_params(params, url, "singular");
    delete params.result_key;
    return this.client.get(params, callback);
  }
});


module.exports = HighlandManager;
