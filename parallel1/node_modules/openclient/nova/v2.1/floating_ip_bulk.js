var base = require("../../client/base"),
    error = require("../../client/error");

var FloatingIPBulkManager = base.Manager.extend({
    namespace: "os-floating-ips-bulk",
    plural: "floating_ip_info",
    singular: "floating_ip",

    _prepare_data: function(data, singular) {
      var result = {};
      result[singular] = data;
      return result;
    },

    // Prepares common parameters to be passed to client.request().
    _prepare_params: function (params, url, singular) {
      params = params || {};
      params.url = params.url || url;
      // Allow false-y values for the result key.
      if (typeof(params.result_key) === "undefined") {
        if(singular) {
          params.result_key = singular;
        }
      }

      if (params.push_data) {
        params.push_data = this._rpc_to_api(params.push_data);
      }

      // Ensure that we only wrap the data object if data is present and
      // contains actual values.
      if (params.use_raw_data) {
        params.data = params.data;
      } else if (params.data && typeof params.data === "object" && Object.keys(params.data).length > 0) {
        if(singular) {
          params.data = this._prepare_data(params.data || {}, singular);
        }
      } else {
        params.data = {};
      }
      return params;
    },

    create: function(params, callback) {
      params.manager_method = "create";
      this._prepare_params(params, this.get_base_url(params), 'floating_ips_bulk_create');
      this.client[params.http_method || this.method_map.create](params, callback);
    },

    update: function (params, callback) {
      params.manager_method = "update";
      delete params.id;
      this._prepare_params(params, this.get_base_url(params) + '/delete');
      this.client[params.http_method || this.method_map.update](params, callback);
    }
});

module.exports = FloatingIPBulkManager
