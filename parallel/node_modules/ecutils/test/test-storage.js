// Copyright (c) 2014. This file is confidential and proprietary.
// All Rights Reserved, Microchild Technologies (http://www.microchild.com)

var assert = require('assert');

var storage;
if (process.env.COVLIB) {
    storage = require('./covlib//lib/storage');
} else {
    storage = require('../lib/storage');
}

var mockRedis = require('./mock/mockRedis');

var fetchAt = new Date().getTime();

var mockRedisClient = mockRedis.mockRedisClient;

var options = {
    'hash_prefix': 'instances',
    'fetch_at': fetchAt
};

var storageObj = new storage.Storage({
    'redis_client': mockRedisClient,
    'debug': false
});

suite('Storage Testing', function() {
    suite('function unlockTask', function() {
        test('Existing key should be deleted', function() {
            var mockRedisStore = {'lock.sync_instances': 1};
            mockRedisClient._setRedisStore(mockRedisStore);
            storageObj.unlockTask('lock.sync_instances',
                function(err, reply) {
                assert.equal(null, err);
                assert.equal(true, reply);
                mockRedisClient.GET('lock.sync_instances',
                    function(err, reply) {
                    assert.equal(null, reply);
                });
            }); // end storageObj.unlockTask
        }); // end test unlock

        test('No existing key should require false', function() {
            storageObj.unlockTask('nokey',
                function(err, reply) {
                assert.equal(null, err);
                assert.equal(false, reply);
            }); // end storageObj.unlockTask
        }); // end test
    }); // end suite unlock
}); // end suite Storage Testing
