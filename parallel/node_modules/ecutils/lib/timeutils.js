// Copyright (c) 2014. This file is confidential and proprietary.
// All Rights Reserved, Microchild Technologies (http://www.microchild.com)

'use strict';

/**
 *  Module: timeutils.js
 *
 * Collection of functions for handling date and time
 */

/**
 * Return true if new date is fresher than original one. Both
 * date and millionseconds is supported as parameters.
 *
 * @param {Object} originalDate Original date
 * @param {Object} newDate New Date
 * @param {Object} needFresh If fresh when new date equals
 *                 to or bigger than original date
 */
function isExpired(originalDate, newDate, needFresh) {
    if(needFresh) {
        return toMilliseconds(newDate) >= toMilliseconds(originalDate);
    } else {
        return toMilliseconds(newDate) > toMilliseconds(originalDate);
    }
} // end function isExpired
exports.isExpired = isExpired;

/**
 * Return millionseconds according to input. If dateString is
 * already a millionseconds, just return it, otherwise return
 * millionseconds.
 *
 * @param {String} dateString A date string
 */
function toMilliseconds(dateString) {
    if(Number.isNaN(new Date(dateString).getTime()))  {
        return dateString;
    } else {
        return new Date(dateString).getTime();
    }
}
exports.toMilliseconds = toMilliseconds;
