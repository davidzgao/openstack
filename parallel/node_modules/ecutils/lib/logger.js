// Copyright (c) 2014. This file is confidential and proprietary.
// All Rights Reserved, Microchild Technologies (http://www.microchild.com)

/**
 *  Module: logger.js
 *
 * Collection of functions for dealing with log4js.
 */

var fs = require('fs');
var log4js = require('log4js');
var path = require('path');
var mkdirp = require('mkdirp');

var setLogger = function(logger) {
    if(logger === undefined) {
        console.debug = console.log;
        return console;
    } else {
        return logger;
    }
};
exports.setLogger = setLogger;
/**
 * Initialize log4js method with options, return a log4js object.
 * If no file name is given, make all output to stdout.
 *
 * ### Examples:
 *
 *     var logOptions = {
 *         'logLevel': 'debug',
 *         'logFile': 'logs/script.log'
 *     };
 *
 *     var log = require('ecutils').log;
 *     logger = log.initLogger(logOptions).getLogger();
 *
 * ### Response:
 *
 * Returns log4js object
 *
 * @parma {Object} options A collection of named parameters
 */
var initLogger = function(options) {
    var logLevel = options['logLevel'] || 'ALL';
    var logFile = options['logFile'];
    var maxLogSize = options['maxLogSize'] || 10240000;
    var backups = options['backups'] || 3;

    var defaultLayout = {
        type: 'pattern',
        pattern: '%[[%d] [%p] %c[%x{pid}] -%] %m%n',
        tokens: {
            'pid': function() { return process.pid; }
        }
    };

    var appenders = [];
    var consoleAppender = {
        'type': 'console',
        //'category': 'console',
        'layout': defaultLayout
    };
    var fileAppender = {
        'type': 'file',
        'filename': logFile,
        'maxLogSize': maxLogSize,
        'backups': backups,
        'layout': defaultLayout
    };

    appenders.push(consoleAppender);
    if(logFile === undefined) {
        appenders.push(fileAppender);
    }

    var logPath = path.dirname(logFile);
    if(! fs.existsSync(logPath)) {
        mkdirp.sync(logPath);
    }

    log4js.configure({
      'appenders': appenders,
      replaceConsole: true
    });

    var logger = log4js.getLogger();
    logger.setLevel(logLevel);

    return logger;
}; // end var initLogger
exports.initLogger = initLogger;

/**
 * Do console.log for other lib in ecutils.
 *
 * Example:
 *
 *     log.loggerDebug(ifDebug, 'id is %s', id);
 */
var loggerDebug = function() {
    // Get arguments list.
    var args = [].slice.apply(arguments);
    var debug = args[0];
    if(debug) {
        // delete first item from args.
        args.splice(0, 1);
        console.log.apply(global, args);
    }
}
exports.loggerDebug = loggerDebug;
