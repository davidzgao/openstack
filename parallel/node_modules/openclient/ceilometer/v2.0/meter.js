var base = require("../../client/base"),
    error = require("../../client/error"),
    urljoin = require("../../client/utils").urljoin;

var MeterManager = base.Manager.extend({
  namespace: "meter_sample",
  singular: "meter_sample",

  get_base_url: function (params) {
    var base = this.client.url_for(params.endpoint_type || this.endpoint_type,
                                   undefined, params.region_name);
    if (!base) {
      base = this.client.url_for(params.endpoint_type_backup || this.endpoint_type_backup,
                                 undefined, params.region_name);
    }
    return urljoin(base, "v2", this.prepare_namespace(params));
  },


  /**
  * The format of params like:
  * {
  *   item: 'cpu_util',
  *   query: {limit: 10, q.field: 'resource_id', q.op: 'eq'}
  * }
  * # Update: support list of query item
  *   query : {
  *     {'q.field': ['resource_id', 'fitness']}
  *   }
  */
  getMeters: function (params, callback) {
    var base_url = this.get_base_url(params);
    params.url = base_url + '/' + params.item;
    queryString = "";
    Object.keys(params.query).forEach(function(key) {
        var q = params.query[key];
        if(typeof q == 'string') {
            queryString += "&" + key + "=" + q;
        } else if(q['q.field'] != undefined) {
            queryString += "&q.field=" + q['q.field'];
            queryString += "&q.op=" + (q['q.op'] || 'eq');
            queryString += "&q.value=" + q['q.value'];
        } else if(q['limit'] != undefined) {
            queryString += "&limit=" + q['limit'];
        } else if ( q instanceof Array) {
            for (var value = 0; value < q.length; value ++ ) {
                queryString += "&" + key + "=" + q[value];
            }
        }
    });
    delete params.query;
    if(queryString != "") {
      params.url += "?" + queryString.substring(1);
    }
    this.client.get(params, callback);
  }
});

module.exports = MeterManager;
